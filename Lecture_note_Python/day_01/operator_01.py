# -*- coding: utf-8 -*-

# operator_01.py

# 주석
# - 프로그램 소스 코드에 대한 설명을 의미
# - 프로그램의 실행과 별도로 저장(실행에 영향이 없음)
# 주석을 작성하는 방법
# 1. #을 사용
# - 1줄의 주석을 작성하는 경우 사용
# 2. """ 을 사용
# - 여러줄의 주석을 작성하는 경우 사용
"""
여기서부터
주석문
입니다.
"""

# 연산자
# 프로그램 언어에서 정의되어 있는 특별한 기호
# 연산자는 피연산자에 대해서 정의된 동작을
# 수행하고 그 결과를 반환할 수 있습니다.
# 연산자의 종류..
# - +, -, *, /, %, = ...

n1 = 10
n2 = 3

r = n1 + n2
print(r)

# fotmat 메소드
# 문자열의 구성에 변수의 값을 사용할 수 있도록
# 제어할 수 있는 기능을 제공합니다.
# "{} {} ...".format(값0, 값1, ...)
print("{0} + {1} = {2}".format(n1, n2, r))

# 포맷팅 문자열을 활용한 출력 방식
# f"{값 또는 변수명}"
# 주의사항 : 파이썬 3.6 이상에서만 가능함
print(f"{n1} + {n2} = {r}")

r = n1 - n2
print(f"{n1} - {n2} = {r}")

r = n1 * n2
print(f"{n1} * {n2} = {r}")

# 나누기 연산 : / 연산자를 사용
# 파이썬 3에서는 소수점 연산이 기본
r = n1 / n2
print(f"{n1} / {n2} = {r}")

# 나누기 연산 시, 정수(몫)의 값을 반환받고자
# 하는 경우 // 연산자를 사용할 수 있습니다.
r = n1 // n2
print(f"{n1} // {n2} = {r}")

# 나머지 연산자 : %
# 좌항 % 우항 -> 좌항에서 우항으로 나누었을때
#               나머지의 값이 반환
# - 짝수/홀수 구분
# ( % 2의 결과가 0인 경우 짝수)
# ( % 2의 결과가 1인 경우 홀수)
# - 특정 배수를 판단할 때
# ( % 7의 결과가 0인 경우 7의 배수)
r = n1 % n2
print(f"{n1} % {n2} = {r}")

# 제곱 연산자 : **
# 좌항의 값을 우항으로 제곱한 결과가 반환
r = n1 ** n2
print(f"{n1} ** {n2} = {r}")
















